// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"

// DATE "06/05/2019 22:25:36"

// 
// Device: Altera EP4CE22F17C6 Package FBGA256
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module main (
	LE,
	EOC_integrado,
	Start,
	Clk_50MHz,
	clk_switches,
	Comparador,
	Output_Enable,
	New_start,
	Clock_output,
	SH,
	Result,
	Sel_Conversor);
output 	LE;
input 	EOC_integrado;
input 	Start;
input 	Clk_50MHz;
input 	[7:0] clk_switches;
input 	Comparador;
input 	Output_Enable;
output 	New_start;
output 	Clock_output;
output 	SH;
output 	[7:0] Result;
input 	Sel_Conversor;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \EOC_integrado~input_o ;
wire \Start~input_o ;
wire \Clk_50MHz~input_o ;
wire \clk_switches[7]~input_o ;
wire \clk_switches[6]~input_o ;
wire \clk_switches[5]~input_o ;
wire \clk_switches[4]~input_o ;
wire \clk_switches[3]~input_o ;
wire \clk_switches[2]~input_o ;
wire \clk_switches[1]~input_o ;
wire \clk_switches[0]~input_o ;
wire \Comparador~input_o ;
wire \Result[7]~output_o ;
wire \Result[6]~output_o ;
wire \Result[5]~output_o ;
wire \Result[4]~output_o ;
wire \Result[3]~output_o ;
wire \Result[2]~output_o ;
wire \Result[1]~output_o ;
wire \Result[0]~output_o ;
wire \LE~output_o ;
wire \New_start~output_o ;
wire \Clock_output~output_o ;
wire \SH~output_o ;
wire \Sel_Conversor~input_o ;
wire \Output_Enable~input_o ;


cycloneive_io_obuf \Result[7]~output (
	.i(!\Sel_Conversor~input_o ),
	.oe(\Output_Enable~input_o ),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Result[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \Result[7]~output .bus_hold = "false";
defparam \Result[7]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Result[6]~output (
	.i(!\Output_Enable~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Result[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \Result[6]~output .bus_hold = "false";
defparam \Result[6]~output .open_drain_output = "true";
// synopsys translate_on

cycloneive_io_obuf \Result[5]~output (
	.i(!\Output_Enable~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Result[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \Result[5]~output .bus_hold = "false";
defparam \Result[5]~output .open_drain_output = "true";
// synopsys translate_on

cycloneive_io_obuf \Result[4]~output (
	.i(!\Output_Enable~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Result[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \Result[4]~output .bus_hold = "false";
defparam \Result[4]~output .open_drain_output = "true";
// synopsys translate_on

cycloneive_io_obuf \Result[3]~output (
	.i(!\Output_Enable~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Result[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \Result[3]~output .bus_hold = "false";
defparam \Result[3]~output .open_drain_output = "true";
// synopsys translate_on

cycloneive_io_obuf \Result[2]~output (
	.i(!\Output_Enable~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Result[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \Result[2]~output .bus_hold = "false";
defparam \Result[2]~output .open_drain_output = "true";
// synopsys translate_on

cycloneive_io_obuf \Result[1]~output (
	.i(!\Output_Enable~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Result[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \Result[1]~output .bus_hold = "false";
defparam \Result[1]~output .open_drain_output = "true";
// synopsys translate_on

cycloneive_io_obuf \Result[0]~output (
	.i(!\Output_Enable~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Result[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \Result[0]~output .bus_hold = "false";
defparam \Result[0]~output .open_drain_output = "true";
// synopsys translate_on

cycloneive_io_obuf \LE~output (
	.i(vcc),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LE~output_o ),
	.obar());
// synopsys translate_off
defparam \LE~output .bus_hold = "false";
defparam \LE~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \New_start~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\New_start~output_o ),
	.obar());
// synopsys translate_off
defparam \New_start~output .bus_hold = "false";
defparam \New_start~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Clock_output~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Clock_output~output_o ),
	.obar());
// synopsys translate_off
defparam \Clock_output~output .bus_hold = "false";
defparam \Clock_output~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \SH~output (
	.i(vcc),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\SH~output_o ),
	.obar());
// synopsys translate_off
defparam \SH~output .bus_hold = "false";
defparam \SH~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \Sel_Conversor~input (
	.i(Sel_Conversor),
	.ibar(gnd),
	.o(\Sel_Conversor~input_o ));
// synopsys translate_off
defparam \Sel_Conversor~input .bus_hold = "false";
defparam \Sel_Conversor~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Output_Enable~input (
	.i(Output_Enable),
	.ibar(gnd),
	.o(\Output_Enable~input_o ));
// synopsys translate_off
defparam \Output_Enable~input .bus_hold = "false";
defparam \Output_Enable~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \EOC_integrado~input (
	.i(EOC_integrado),
	.ibar(gnd),
	.o(\EOC_integrado~input_o ));
// synopsys translate_off
defparam \EOC_integrado~input .bus_hold = "false";
defparam \EOC_integrado~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Start~input (
	.i(Start),
	.ibar(gnd),
	.o(\Start~input_o ));
// synopsys translate_off
defparam \Start~input .bus_hold = "false";
defparam \Start~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Clk_50MHz~input (
	.i(Clk_50MHz),
	.ibar(gnd),
	.o(\Clk_50MHz~input_o ));
// synopsys translate_off
defparam \Clk_50MHz~input .bus_hold = "false";
defparam \Clk_50MHz~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \clk_switches[7]~input (
	.i(clk_switches[7]),
	.ibar(gnd),
	.o(\clk_switches[7]~input_o ));
// synopsys translate_off
defparam \clk_switches[7]~input .bus_hold = "false";
defparam \clk_switches[7]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \clk_switches[6]~input (
	.i(clk_switches[6]),
	.ibar(gnd),
	.o(\clk_switches[6]~input_o ));
// synopsys translate_off
defparam \clk_switches[6]~input .bus_hold = "false";
defparam \clk_switches[6]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \clk_switches[5]~input (
	.i(clk_switches[5]),
	.ibar(gnd),
	.o(\clk_switches[5]~input_o ));
// synopsys translate_off
defparam \clk_switches[5]~input .bus_hold = "false";
defparam \clk_switches[5]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \clk_switches[4]~input (
	.i(clk_switches[4]),
	.ibar(gnd),
	.o(\clk_switches[4]~input_o ));
// synopsys translate_off
defparam \clk_switches[4]~input .bus_hold = "false";
defparam \clk_switches[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \clk_switches[3]~input (
	.i(clk_switches[3]),
	.ibar(gnd),
	.o(\clk_switches[3]~input_o ));
// synopsys translate_off
defparam \clk_switches[3]~input .bus_hold = "false";
defparam \clk_switches[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \clk_switches[2]~input (
	.i(clk_switches[2]),
	.ibar(gnd),
	.o(\clk_switches[2]~input_o ));
// synopsys translate_off
defparam \clk_switches[2]~input .bus_hold = "false";
defparam \clk_switches[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \clk_switches[1]~input (
	.i(clk_switches[1]),
	.ibar(gnd),
	.o(\clk_switches[1]~input_o ));
// synopsys translate_off
defparam \clk_switches[1]~input .bus_hold = "false";
defparam \clk_switches[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \clk_switches[0]~input (
	.i(clk_switches[0]),
	.ibar(gnd),
	.o(\clk_switches[0]~input_o ));
// synopsys translate_off
defparam \clk_switches[0]~input .bus_hold = "false";
defparam \clk_switches[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Comparador~input (
	.i(Comparador),
	.ibar(gnd),
	.o(\Comparador~input_o ));
// synopsys translate_off
defparam \Comparador~input .bus_hold = "false";
defparam \Comparador~input .simulate_z_as = "z";
// synopsys translate_on

assign LE = \LE~output_o ;

assign New_start = \New_start~output_o ;

assign Clock_output = \Clock_output~output_o ;

assign SH = \SH~output_o ;

assign Result[7] = \Result[7]~output_o ;

assign Result[6] = \Result[6]~output_o ;

assign Result[5] = \Result[5]~output_o ;

assign Result[4] = \Result[4]~output_o ;

assign Result[3] = \Result[3]~output_o ;

assign Result[2] = \Result[2]~output_o ;

assign Result[1] = \Result[1]~output_o ;

assign Result[0] = \Result[0]~output_o ;

endmodule
